package main

import (
	"github.com/stretchr/testify/assert"
	"testing"
)

type iopair struct {
	inx      int
	iny      int
	outbytes []byte
}

var iopairs = []iopair{
	{0, 19, []byte{0x01, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
	{4, 19, []byte{0, 0, 0x20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}},
}

func TestLinesToBytes(t *testing.T) {
	for _, iopair := range iopairs {
		lines := ConstructLines(iopair.inx, iopair.iny)
		bytes, _ := linesToBytes(lines, 20, 10, false)
		assert.Equal(t, iopair.outbytes, bytes, "outbytes should be the same")
	}
}

func ConstructLines(x int, y int) []string {
	lines := make([]string, 20)
	for i := range lines {
		lines[i] = "0000000000"
	}

	r := []rune(lines[y])
	r[x] = '1'
	lines[y] = string(r)

	return lines
}

/* Test plan:
- 0 -> lots of 0s
- 1 -> lots of 1s
- 5x5 -> lots of 5x5
- 3x3 -> lots of 3x3
*/

type elpair struct {
	inlines  []string
	outlines []string
}

var elpairs = []elpair{
	{
		[]string{
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
			"0101010101",
			"1010101010",
			"1111100000",
			"0000011111",
			"0011001100",
			"1100110011",
			"0001110001",
			"1100011100",
			"0111000111",
			"1111000011",
			"1100001111",
			"0000111100",
			"0011110000",
			"1001010101",
			"0101001000",
		},
		[]string{
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
			"0101010101",
			"1010101010",
			"1111100000",
			"0000011111",
			"0011001100",
			"1100110011",
			"0001110001",
			"1100011100",
			"0111000111",
			"1111000011",
			"1100001111",
			"0000111100",
			"0011110000",
			"1001010101",
			"0101001000",
		},
	},
	{
		[]string{
			"1010101010",
		},
		[]string{
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
			"1010101010",
		},
	},
	{
		[]string{
			"0",
		},
		[]string{
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
			"0000000000",
		},
	},
	{
		[]string{
			"1",
		},
		[]string{
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
			"1111111111",
		},
	},
	{
		[]string{
			"010",
			"111",
			"101",
		},
		[]string{
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
			"1011011011",
			"0100100100",
			"1111111111",
		},
	},
	{
		[]string{
			"01010",
			"11111",
			"00000",
			"10111",
			"00100",
		},
		[]string{
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
			"0101001010",
			"1111111111",
			"0000000000",
			"1011110111",
			"0010000100",
		},
	},
}

func TestExtendLines(t *testing.T) {
	for _, elpair := range elpairs {
		lines := extendLines(elpair.inlines)
		assert.Equal(t, lines, elpair.outlines)
	}
}
